name: CD
permissions:
  id-token: write
  contents: read
# triggers on pull_request for ease of testing
# on:
#   push:
#     branches:
#       - main
on:
  pull_request:
  
jobs:
  archive-src-code:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.1" # latest LTS at the time this is written.
      - name: Write app prod env vars
        working-directory: "./"
        run: |
          rm .env
          echo "ME_CONFIG_BASICAUTH_USERNAME=$ME_CONFIG_BASICAUTH_USERNAME" >> .env
          echo "ME_CONFIG_BASICAUTH_PASSWORD=$ME_CONFIG_BASICAUTH_PASSWORD" >> .env
          echo "POSTGRES_USER=$POSTGRES_USER" >> .env
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
          echo "POSTGRES_DB=$POSTGRES_DB" >> .env
          echo "PGADMIN_DEFAULT_EMAIL=$PGADMIN_DEFAULT_EMAIL" >> .env
          echo "PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD" >> .env
          echo "NGINX_SERVER_NAME=$EC2_INSTANCE_PUBLIC_DNS" >> .env
        env:
          #postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
          PGADMIN_DEFAULT_EMAIL: ${{secrets.PGADMIN_DEFAULT_EMAIL}}
          PGADMIN_DEFAULT_PASSWORD: ${{secrets.PGADMIN_DEFAULT_PASSWORD}}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Get EC2 public IP address from our AWS stack
        run: |
          echo "EC2_INSTANCE_PUBLIC_DNS=$(aws cloudformation describe-stacks --stack-name ProdStack --query 'Stacks[0].Outputs[?OutputKey==`EC2PublicDNS`].OutputValue' --output text)" >> $GITHUB_ENV
      
      - name: Get frontend url for testing.
        working-directory: "./frontend"
        run: |
          echo "VITE_BACKEND_API_BASE_URL=http://$EC2_INSTANCE_PUBLIC_DNS:5000" >> .test
          cat .test
      - name: prepare frontend production assets
        working-directory: "./frontend"
        run: |
          rm .env
          echo "VITE_BACKEND_API_BASE_URL=http://$EC2_INSTANCE_PUBLIC_DNS:3000" >> .env
          echo "VITE_LINKEDIN_CLIENT_ID=$VITE_LINKEDIN_CLIENT_ID" >> .env
          echo "VITE_LINKEDIN_AUTH_REDIRECTURI=http://$EC2_INSTANCE_PUBLIC_DNS:5000/signin" >> .env
          cat .env
          npm install
          npm run build
        env:
          # node creds
          VITE_LINKEDIN_CLIENT_ID: 86yqr14akub4tu
      - name: Write docker-compose prod env vars
        working-directory: "./backend"
        run: |
          rm .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "SWAGGER_API_BASE_URL=$SWAGGER_API_BASE_URL" >> .env
          echo "DB_ADMIN_EMAIL=$DB_ADMIN_EMAIL" >> .env
          echo "DB_ADMIN_PASSWORD_ENCRYPTED=$DB_ADMIN_PASSWORD_ENCRYPTED" >> .env
          echo "LINKEDIN_CLIENT_ID=$LINKEDIN_CLIENT_ID" >> .env
          echo "LINKEDIN_CLIENT_SECRET=$LINKEDIN_CLIENT_SECRET" >> .env
          echo "LINKEDIN_REDIRECT_URI=$LINKEDIN_REDIRECT_URI" >> .env
          echo "LINKEDIN_TOKEN_URL=$LINKEDIN_TOKEN_URL" >> .env
          echo "COOKIE_KEY=$COOKIE_KEY" >> .env
          echo "SMTP_EMAIL_ENABLED=$SMTP_EMAIL_ENABLED" >> .env
          echo "SMTP_EMAIL_USER=$SMTP_EMAIL_USER" >> .env
          echo "SMTP_EMAIL_PASSWORD=$SMTP_EMAIL_PASSWORD" >> .env
        env:
          # node creds
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/test?schema=public
          SWAGGER_API_BASE_URL: http://give-it-a-good-name:3000
          DB_ADMIN_PASSWORD_ENCRYPTED: $2a$10$tRs1k3ar2cL5qY3XH2K8ZeOER2BIj1veqSoMDuFyAqafaAwoqadE6
          DB_ADMIN_EMAIL: fellows@fellows.com
          LINKEDIN_CLIENT_ID: 86yqr14akub4tu
          LINKEDIN_CLIENT_SECRET: 3j80hVRkhdubWQWk
          LINKEDIN_REDIRECT_URI: /api/auth/linkedin/redirect
          LINKEDIN_TOKEN_URL: https://www.linkedin.com/oauth/v2/accessToken
          COOKIE_KEY: fellowappsteam10
          SMTP_EMAIL_ENABLED: true
          SMTP_EMAIL_USER: liuzhuo56@gmail.com
          SMTP_EMAIL_PASSWORD: kwhz cgbd pupm brnv
      - name: Archive src code
        run: |
          cat ".env"
          cat "./backend/.env"
          ls -a
          mkdir give-it-a-good-name
          tar -czvf give-it-a-good-name/source_code.tar.gz \
          --exclude=give-it-a-good-name \
          --exclude=node_modules \
          --exclude=infrastructure \
          --exclude=.ssh \
          --exclude=e2eTests \
          --exclude=allScrapeData .
        working-directory: "./"
      - name: upload archived src code
        uses: actions/upload-artifact@v4
        with:
          name: source_code
          path: ./give-it-a-good-name/source_code.tar.gz
  # Please try not make change to AWS CDK stack. 
  # It is dangerous to deploy stuff to AWS, could incur massive costs if not careful.
  # App should have been at mature stage here as we are trying to simplify infra as much as possible.
  # If you do need to make change to it you need to contact me zdy120939259@outlook.com or mzhu929@aucklanduni.ac.nz
  deploy-infra:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "^17.3.0"
      - name: Install AWS CDK dependencies
        working-directory: "./infrastructure"
        run: |
          npm install -g aws-cdk
          npm install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Deploy to aws cdk
        run: |
          npm run deploy-prod
        working-directory: "./infrastructure"
  deploy-ec2:
    needs: archive-src-code
    runs-on: ubuntu-latest
    steps:
      - name: Download latest archived source code
        uses: actions/download-artifact@v4
        with:
          name: source_code
          path: ./give-it-a-good-name
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Get EC2 public IP address from our AWS stack
        run: |
          echo "EC2_INSTANCE_PUBLIC_DNS=$(aws cloudformation describe-stacks --stack-name ProdStack --query 'Stacks[0].Outputs[?OutputKey==`EC2PublicDNS`].OutputValue' --output text)" >> $GITHUB_ENV
      - name: ssh upload src code to ec2 and deploy docker-compose
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" >> mykey.pem
          chmod 400 mykey.pem

          # Helper function for SSH commands with logging
          ssh_cmd() {
            ssh -i mykey.pem -o StrictHostKeyChecking=no ec2-user@$EC2_INSTANCE_PUBLIC_DNS "$1"
          }

          # clean up existing folder and check memory/disk
          ssh_cmd 'ls'
          ssh_cmd 'pwd'
          ssh_cmd 'sudo rm -rf ~/give-it-a-good-name'
          ssh_cmd 'docker system prune -f'
          # ssh_cmd 'echo "Checking disk space"; df -h;'
          # ssh_cmd 'echo Checking disk space usage breakdown; sudo du -x -h / | sort -h | tail -40;'

          # copy zipped source code over.
          scp -i mykey.pem -o StrictHostKeyChecking=no -pr ./give-it-a-good-name ec2-user@$EC2_INSTANCE_PUBLIC_DNS:~/give-it-a-good-name
          
          # install nvm and node
          ssh_cmd 'sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
          ssh_cmd 'source ~/.bashrc; nvm install 20.11.1'
          
          # unzip and spin up docker-compose
          ssh_cmd 'cd ~/give-it-a-good-name; sudo tar -xzf ./source_code.tar.gz;'
          ssh_cmd 'sudo sh ~/give-it-a-good-name/scripts/start-prod.sh;'
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}