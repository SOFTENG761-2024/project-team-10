generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource test {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id @default(uuid()) @test.VarChar
  Profile Profile[]
}

model Profile {
  id     String @id @default(uuid()) @test.VarChar
  userId String @test.VarChar
  bio    String @test.VarChar(500)
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model user_profile {
  id                   Int                    @id @default(autoincrement())
  usertypeid           Int
  institution_id       Int?
  faculty_id           Int?
  organization_id      Int?
  first_name           String                 @test.VarChar
  last_name            String                 @test.VarChar
  preferred_name       String?                @test.VarChar
  title                String?                @test.VarChar
  primary_email        String?                @unique @test.VarChar
  orcid_identifier     String?                @unique @test.VarChar
  linkedin_url         String?                @test.VarChar
  secondary_email      String?                @test.VarChar
  mobile_phone         String?                @test.VarChar
  bio                  String?
  research_area        String?
  skills               String?
  research_tags        String?
  expertise            String?
  tools                String?
  profile_picture      String?                @test.VarChar
  isscrapped           Boolean?
  signup_datetime      DateTime?              @test.Timestamp(6)
  professional_details professional_details[]
  publication          publication[]
  teaching_activity    teaching_activity[]
  user_affiliations    user_affiliations[]
  faculty              faculty?               @relation(fields: [faculty_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  institution          institution?           @relation(fields: [institution_id], references: [institution_id], onDelete: NoAction, onUpdate: NoAction)
  organization         organization?          @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usertype             usertype               @relation(fields: [usertypeid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model institution {
  institution_id    Int                 @id @default(autoincrement())
  name              String?             @test.VarChar
  address           String?             @test.VarChar
  user_affiliations user_affiliations[]
  user_profile      user_profile[]
}

model faculty {
  id           Int            @id @default(autoincrement())
  name         String?        @test.VarChar
  user_profile user_profile[]
}


model organization {
  id           Int            @id @default(autoincrement())
  name         String?        @test.VarChar
  address      String?        @test.VarChar
  user_profile user_profile[]
}

model professional_details {
  id           Int           @id @default(autoincrement())
  name         String?       @test.VarChar
  user_id      Int?
  description  String?
  user_profile user_profile? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model publication {
  id             Int           @id @default(autoincrement())
  user_id        Int?
  title          String?       @test.VarChar
  journal        String?       @test.VarChar
  link           String?       @test.VarChar
  date_published DateTime?     @test.Date
  user_profile   user_profile? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model teaching_activity {
  id           Int           @id @default(autoincrement())
  name         String?       @test.VarChar
  user_id      Int?
  description  String?
  user_profile user_profile? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_affiliations {
  id             Int           @id @default(autoincrement())
  user_id        Int?
  institution_id Int?
  role           String?       @test.VarChar
  institution    institution?  @relation(fields: [institution_id], references: [institution_id], onDelete: NoAction, onUpdate: NoAction)
  user_profile   user_profile? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model usertype {
  id           Int            @id @default(autoincrement())
  name         String?        @test.VarChar
  user_profile user_profile[]
}
